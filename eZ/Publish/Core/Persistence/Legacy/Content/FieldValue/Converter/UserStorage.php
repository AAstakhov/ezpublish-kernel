<?php
/**
 * File containing the UserStorage class
 *
 * @copyright Copyright (C) 1999-2012 eZ Systems AS. All rights reserved.
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
 * @version //autogentag//
 */

namespace eZ\Publish\Core\Persistence\Legacy\Content\FieldValue\Converter;
use eZ\Publish\SPI\Persistence\Fields\Storage,
    eZ\Publish\SPI\Persistence\Content\Field;

/**
 * Description of UserStorage
 *
 * Methods in this interface are called by storage engine.
 *
 * $context array passed to most methods provides some context for the field handler about the
 * currently used storage engine.
 * The array should at least define 2 keys :
 *   - identifier (connection identifier)
 *   - connection (the connection handler)
 * For example, using Legacy storage engine, $context will be:
 *   - identifier = 'LegacyStorage'
 *   - connection = {@link \eZ\Publish\Core\Persistence\Legacy\EzcDbHandler} object handler (for DB connection),
 *                  to be used accordingly to
 *                  {@link http://incubator.apache.org/zetacomponents/documentation/trunk/Database/tutorial.html ezcDatabase} usage
 *
 * The User storage handles the following attributes, following the user field
 * type in eZ Publish 4:
 *  - account_key
 *  - has_stored_login
 *  - is_logged_in
 *  - is_enabled
 *  - is_locked
 *  - last_visit
 *  - login_count
 */
class UserStorage implements Storage
{
    /**
     * Gateways
     *
     * @var UserStorage\Gateway[]
     */
    protected $gateways;

    /**
     * Construct from gateways
     *
     * @param array $gateways
     * @return void
     */
    public function __construct( array $gateways )
    {
        foreach ( $gateways as $identifier => $gateway )
        {
            $this->addGateway( $identifier, $gateway );
        }
    }

    /**
     * Add gateway
     *
     * @param string $identifier
     * @param UserStorage\Gateway $gateway
     * @return void
     */
    public function addGateway( $identifier, UserStorage\Gateway $gateway )
    {
        $this->gateways[$identifier] = $gateway;
    }

    /**
     * Allows custom field types to store data in an external source (e.g. another DB table).
     *
     * Stores value for $field in an external data source.
     * The whole {@link eZ\Publish\SPI\Persistence\Content\Field} object is passed and its value
     * is accessible through the {@link eZ\Publish\SPI\Persistence\Content\FieldValue} 'value' property.
     * This value holds the data filled by the user as a {@link eZ\Publish\Core\Repository\FieldType\Value} based object,
     * according to the field type (e.g. for TextLine, it will be a {@link eZ\Publish\Core\Repository\FieldType\TextLine\Value} object).
     *
     * $field->id = unique ID from the attribute tables (needs to be generated by
     * database back end on create, before the external data source may be
     * called from storing).
     *
     * The context array provides some context for the field handler about the
     * currently used storage engine.
     * The array should at least define 2 keys :
     *   - identifier (connection identifier)
     *   - connection (the connection handler)
     * For example, using Legacy storage engine, $context will be:
     *   - identifier = 'LegacyStorage'
     *   - connection = {@link \eZ\Publish\Core\Persistence\Legacy\EzcDbHandler} object handler (for DB connection),
     *                  to be used accordingly to
     * The context array provides some context for the field handler about the
     * currently used storage engine.
     * The array should at least define 2 keys :
     *   - identifier (connection identifier)
     *   - connection (the connection handler)
     * For example, using Legacy storage engine, $context will be:
     *   - identifier = 'LegacyStorage'
     *   - connection = {@link \eZ\Publish\Core\Persistence\Legacy\EzcDbHandler} object handler (for DB connection),
     *                  to be used accordingly to
     *                  {@link http://incubator.apache.org/zetacomponents/documentation/trunk/Database/tutorial.html ezcDatabase} usage
     *
     * This method might return true if $field needs to be updated after storage done here (to store a PK for instance).
     * In any other case, this method must not return anything (null).
     *
     * @param \eZ\Publish\SPI\Persistence\Content\Field $field
     * @param array $context
     * @return null|true
     */
    public function storeFieldData( Field $field, array $context )
    {
        echo __METHOD__, PHP_EOL;
    }

    /**
     * Populates $field value property based on the external data.
     * $field->value is a {@link eZ\Publish\SPI\Persistence\Content\FieldValue} object.
     * This value holds the data as a {@link eZ\Publish\Core\Repository\FieldType\Value} based object,
     * according to the field type (e.g. for TextLine, it will be a {@link eZ\Publish\Core\Repository\FieldType\TextLine\Value} object).
     *
     * @param \eZ\Publish\SPI\Persistence\Content\Field $field
     * @param array $context
     * @return void
     */
    public function getFieldData( Field $field, array $context )
    {
        $gateway = $this->getGateway( $context );
        $field->value->externalData = $gateway->getFieldData( $field->id );
    }

    /**
     * @param array $fieldId Array of field Ids
     * @param array $context
     * @return bool
     */
    public function deleteFieldData( array $fieldId, array $context )
    {
        echo __METHOD__, PHP_EOL;
    }

    /**
     * Checks if field type has external data to deal with
     *
     * @return bool
     */
    public function hasFieldData()
    {
        return true;
    }

    /**
     * @param \eZ\Publish\SPI\Persistence\Content\Field $field
     * @param array $context
     */
    public function copyFieldData( Field $field, array $context )
    {
        echo __METHOD__, PHP_EOL;
    }

    /**
     * @param \eZ\Publish\SPI\Persistence\Content\Field $field
     * @param array $context
     */
    public function getIndexData( Field $field, array $context )
    {
        echo __METHOD__, PHP_EOL;
    }

    /**
     * Get gateway for given context
     *
     * @param array $context
     * @return UserStorage\Gateway
     */
    protected function getGateway( array $context )
    {
        if ( !isset( $this->gateways[$context['identifier']] ) )
        {
            throw new \OutOfBoundsException( "No gateway for ${context['identifier']} available." );
        }

        $gateway = $this->gateways[$context['identifier']];
        $gateway->setConnection( $context['connection'] );

        return $gateway;
    }
}
