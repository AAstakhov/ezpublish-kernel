<?php
/**
 * File containing the UrlAlias ezcDatabase Gateway class
 *
 * @copyright Copyright (C) 1999-2012 eZ Systems AS. All rights reserved.
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
 * @version //autogentag//
 */

namespace eZ\Publish\Core\Persistence\SqlNg\Content\UrlAlias\Gateway;

use eZ\Publish\Core\Persistence\SqlNg\Content\UrlAlias\Gateway;
use eZ\Publish\Core\Persistence\Legacy\EzcDbHandler;
use eZ\Publish\Core\Persistence\SqlNg\Content\Language\MaskGenerator as LanguageMaskGenerator;
use eZ\Publish\SPI\Persistence\Content\UrlAlias;
use ezcQuery;

/**
 * UrlAlias Gateway
 */
class EzcDatabase extends Gateway
{
    /**
     * 2^30, since PHP_INT_MAX can cause overflows in DB systems, if PHP is run
     * on 64 bit systems
     */
    const MAX_LIMIT = 1073741824;

    /**
     * Zeta Components database handler.
     *
     * @var \ezcDbHandler
     */
    protected $dbHandler;

    /**
     * Language mask generator
     *
     * @var \eZ\Publish\Core\Persistence\SqlNg\Content\Language\MaskGenerator
     */
    protected $languageMaskGenerator;

    /**
     * Creates a new EzcDatabase UrlAlias Gateway
     *
     * @param \eZ\Publish\Core\Persistence\Legacy\EzcDbHandler $dbHandler
     * @param \eZ\Publish\Core\Persistence\SqlNg\Content\Language\MaskGenerator $languageMaskGenerator
     */
    public function __construct (
        EzcDbHandler $dbHandler,
        LanguageMaskGenerator $languageMaskGenerator )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Loads list of aliases by given $locationId.
     *
     * @param mixed $locationId
     * @param boolean $custom
     *
     * @return array
     */
    public function loadLocationEntries( $locationId, $custom = false )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Loads paged list of global aliases.
     *
     * @param string|null $languageCode
     * @param int $offset
     * @param int $limit
     *
     * @return array
     */
    public function listGlobalEntries( $languageCode = null, $offset = 0, $limit = -1 )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Returns boolean indicating if the row with given $id is special root entry.
     *
     * Special root entry entry will have parentId=0 and text=''.
     * In standard installation this entry will point to location with id=2.
     *
     * @param mixed $id
     *
     * @return boolean
     */
    public function isRootEntry( $id )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Downgrades autogenerated entry matched by given $action and $languageId and negatively matched by
     * composite primary key.
     *
     * If language mask of the found entry is composite (meaning it consists of multiple language ids) given
     * $languageId will be removed from mask. Otherwise entry will be marked as history.
     *
     * @param string $action
     * @param mixed $languageId
     * @param mixed $newId
     * @param mixed $parentId
     * @param string $textMD5
     *
     * @return void
     */
    public function cleanupAfterPublish( $action, $languageId, $newId, $parentId, $textMD5 )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Marks all entries with given $id as history entries.
     *
     * This method is used by Handler::locationMoved(). For this reason rows are not updated with next id value as
     * all entries with given id are being marked as history and there is no need for id separation.
     * Thus only "link" and "is_original" columns are updated.
     *
     * @param mixed $id
     * @param mixed $link
     *
     * @return void
     */
    public function historizeId( $id, $link )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Updates parent id of autogenerated entries.
     *
     * Update includes history entries.
     *
     * @param mixed $oldParentId
     * @param mixed $newParentId
     *
     * @return void
     */
    public function reparent( $oldParentId, $newParentId )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Updates single row data matched by composite primary key.
     *
     * Use optional parameter $languageMaskMatch to additionally limit the query match with languages.
     *
     * @param mixed $parentId
     * @param string $textMD5
     * @param array $values associative array with column names as keys and column values as values
     *
     * @return void
     */
    public function updateRow( $parentId, $textMD5, array $values )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Inserts new row in urlalias_ml table.
     *
     * @param array $values
     *
     * @return mixed
     */
    public function insertRow( array $values )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Returns next value for "id" column.
     *
     * @return mixed
     */
    public function getNextId()
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Loads single row data matched by composite primary key
     *
     * @param mixed $parentId
     * @param string $textMD5
     *
     * @return array
     */
    public function loadRow( $parentId, $textMD5 )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Loads complete URL alias data by given array of path hashes.
     *
     * @param string[] $urlHashes URL string hashes
     *
     * @return array
     */
    public function loadUrlAliasData( array $urlHashes )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Loads autogenerated entry id by given $action and optionally $parentId.
     *
     * @param string $action
     * @param mixed|null $parentId
     *
     * @return array
     */
    public function loadAutogeneratedEntry( $action, $parentId = null )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Loads all data for the path identified by given $id.
     *
     * @throws \RuntimeException
     *
     * @param mixed $id
     *
     * @return array
     */
    public function loadPathData( $id )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Loads path data identified by given ordered array of hierarchy data.
     *
     * The first entry in $hierarchyData corresponds to the top-most path element in the path, the second entry the
     * child of the first path element and so on.
     * This method is faster than self::getPath() since it can fetch all elements using only one query, but can be used
     * only for autogenerated paths.
     *
     * @param array $hierarchyData
     *
     * @return array
     */
    public function loadPathDataByHierarchy( array $hierarchyData )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Converts single row matched by composite primary key to NOP type row.
     *
     * @param mixed $parentId
     * @param string $textMD5
     *
     * @return boolean
     */
    public function removeCustomAlias( $parentId, $textMD5 )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Converts all rows with given $action to NOP type rows.
     *
     * @param mixed $action
     *
     * @return boolean
     */
    public function removeByAction( $action )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }

    /**
     * Loads all autogenerated entries with given $parentId with optionally included history entries.
     *
     * @param mixed $parentId
     * @param boolean $includeHistory
     *
     * @return array
     */
    public function loadAutogeneratedEntries( $parentId, $includeHistory = false )
    {
        throw new \RuntimeException( "@TODO: Implement" );
    }
}
