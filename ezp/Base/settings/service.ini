# Base module settings


#### Services definition
## Each service defines it's own configuration section
# [<service-name>]
## The service needs to be a class
# class=<className>
## Optional a factory method can be specified, it will then be used instead of "new <className>( <arguments> )"
# factory=<methodName>
## Optional define dependencies (arguments), either as scalar values, if prepended with "@" another service
## or if prepended with "$" a variable ($_SERVER, $_COOKIE, $_FILES, $_REQUEST or $serviceContainer)
# arguments[<optionalIdentifier>]=<argument>



[repository]
class=ezp\Base\Repository
arguments[persistence_handler]=@persistence_handler
arguments[io_handler]=@io_handler

[persistence_handler]
# Needs to be defined by extension providing repository handlers atm like bellow
class=ezp\Persistence\Storage\InMemory\Handler

[io_handler]
#class=ezp\Io\Storage\InMemory
class=ezp\Io\Storage\Legacy


## Example for setting up Legacy Persistence Handler (Storage Engine):
#[persistence_handler]
#class=ezp\Persistence\Storage\Legacy\Handler
#arguments[config][dsn]=<driver>://<username>:<password>@<host>:<port>/<database>
#arguments[config][defer_type_update]=false
#arguments[config][external_storages][<fieldTypeIdentifier>]=<classForExternalStorage>
#arguments[config][field_converter][<fieldTypeIdentifier>]=<fieldTypeClass>


## Example for setting up Dispatcher Io Handler (Binary Storage Engine):
## 'Dispatcher' makes it possible to use different handlers based on matching rules
#[io_handler]
#class=ezp\Io\Storage\Dispatcher
#arguments[config][default]=@io_handler_legacy
#arguments[config][amazonS3][handler]=@io_handler_amazonS3
#arguments[config][amazonS3][suffix]=.gif,.jpg
#arguments[config][amazonS3][prefix]=var/original/
#arguments[config][amazonS3][contains]=image-versioned

#[io_handler_legacy]
#class=ezp\Io\Storage\Legacy

#[io_handler_amazonS3]
#class=<s3-class-implementing:ezp\Io\Handler>
#arguments[config][user]=<user>
#arguments[config][password]=<password>
#arguments[config][host]=<host>