<?php
/**
 * File containing the StorageInterface
 *
 * @copyright Copyright (C) 1999-2011 eZ Systems AS. All rights reserved.
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
 * @version //autogentag//
 *
 */

namespace ezp\Persistence\Fields;

/**
 * @package ezp.persistence.fields
 */
interface StorageInterface
{
    /**
     * Business layer set method.
     *
     * This method is used in the business layer to set the $field values from 
     * $data.
     *
     * @param array $data
     * @param \ezp\Persistence\Content\Field $field
     */
    public function setValue( array $data, \ezp\Persistence\Content\Field $field );

    /**
     * Stores $value for $fieldId in an external data source.
     *
     * Allows custom data types to store data in an external source.
     *
     * $fieldId = unique ID from the attribute tables (needs to be generated by 
     * database back end on create, before the external data source may be 
     * called from storing).
     *
     * @param int $fieldId
     * @param \ezp\Persistence\Content\FieldValue $value
     * @return bool
     *
     */
    public function storeFieldData( $fieldId, \ezp\Persistence\Content\FieldValue $value );

    /**
     * @param int $fieldId
     */
    public function getFieldData( $fieldId );

    /**
     * @param array $fieldId
     * @return bool
     */
    public function deleteFieldData( array $fieldId );

    /**
     * @return bool
     */
    public function hasFieldData();

    /**
     * @param int $fieldId
     */
    public function copyFieldData( $fieldId );

    /**
     * @param int $fieldId
     */
    public function getIndexData( $fieldId );
}
?>
