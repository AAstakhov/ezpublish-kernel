<?php
/**
 * File containing the BinaryFileStorage class
 *
 * @copyright Copyright (C) 1999-2011 eZ Systems AS. All rights reserved.
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
 * @version //autogentag//
 */

namespace ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter;
use ezp\Persistence\Fields\Storage,
    ezp\Persistence\Content\FieldValue;

/**
 * Description of BinaryFileStorage
 */
class BinaryFileStorage implements Storage
{
    /**
     * Stores $value for $fieldId in an external data source.
     *
     * Allows custom data types to store data in an external source.
     *
     * $fieldId = unique ID from the attribute tables (needs to be generated by
     * database back end on create, before the external data source may be
     * called from storing).
     *
     * The context array provides some context for the field handler about the
     * currently used database engine. The array should at least define some
     * identifier and additionally pass some kind of connection handler.
     *
     * @param int $fieldId
     * @param \ezp\Persistence\Content\FieldValue $value
     * @param array $context
     * @return bool
     * @todo Handle download_count and version columns
     *
     */
    public function storeFieldData( $fieldId, FieldValue $value, array $context )
    {
        $dbHandler = $context['connection'];
        $file = $value->data->file;

        $q = $dbHandler->createInsertQuery();
        $q->insertInto(
            $dbHandler->quoteTable( 'ezbinaryfile' )
        )->set(
            $dbHandler->quoteColumn( 'contentobject_attribute_id' ),
            $q->bindValue( $fieldId, null, \PDO::PARAM_INT )
        )->set(
            // @todo: How to handle download_count ?
            $dbHandler->quoteColumn( 'download_count' ),
            $q->bindValue( 0, null, \PDO::PARAM_INT )
        )->set(
            $dbHandler->quoteColumn( 'filename' ),
            $q->bindValue( basename( $file->path ) )
        )->set(
            $dbHandler->quoteColumn( 'mime_type' ),
            $q->bindValue( (string)$file->contentType )
        )->set(
            $dbHandler->quoteColumn( 'original_filename' ),
            $q->bindValue( $value->data->originalFilename )
        )->set(
            // @todo: How should I get the version number here ?
            $dbHandler->quoteColumn( 'version' ),
            $q->bindValue( 1, null, \PDO::PARAM_INT )
        );

        $stmt = $q->prepare();
        $stmt->execute();

        return false;
    }

    /**
     * Returns an updated field values based on the external data
     *
     * @param int $fieldId
     * @param \ezp\Persistence\Content\FieldValue $value
     * @param array $context
     * @return \ezp\Persistence\Content\FieldValue
     */
    public function getFieldData( $fieldId, FieldValue $value, array $context )
    {

    }

    /**
     * @param array $fieldId
     * @param array $context
     * @return bool
     */
    public function deleteFieldData( array $fieldId, array $context )
    {

    }

    /**
     * @return bool
     */
    public function hasFieldData()
    {

    }

    /**
     * @param int $fieldId
     * @param array $context
     */
    public function copyFieldData( $fieldId, array $context )
    {

    }

    /**
     * @param int $fieldId
     * @param array $context
     */
    public function getIndexData( $fieldId, array $context )
    {

    }
}
